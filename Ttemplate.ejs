<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD Table</title>
    <style>
        .head {
            color: rgb(255, 51, 0);
            background-color: aqua;
        }

        .delete {
            color: black;
            background-color: red;
        }

        .edit {
            color: red;
            background-color: greenyellow;
        }

        /* Now start css for model form */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.7);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 40%;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        }

        .modal-input {
            display: block;
            margin: 10px 0;
        }
    </style>
</head>

<body>
    <!--  This is model form -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <h3>Edit Data:</h3>
            <input type="text" class="modal-input" id="modalName" placeholder="Name">
            <input type="text" class="modal-input" id="modalEmail" placeholder="Email">
            <input type="text" class="modal-input" id="modalPhone" placeholder="Phone">

            <button id="updateBtn">Update</button>
        </div>
    </div>




    <h3>Add Data to the Table:</h3>
    <input type="text" placeholder="Name" id="name"><br>
    <input type="text" placeholder="Email" id="email"><br>
    <input type="text" placeholder="Phone" id="phone"><br>

    <button id="addBtn">Add Data</button>

    <h3>Data Table:</h3>
    <!-- ... (your existing HTML content) ... -->

    <table id="task-list" border="2">
        <thead class="head">
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>

            <th>Action</th>
        </thead>
        <% taskList.forEach(function(task) { %>
            <tr>
                <td data-task-id="<%- task.id %>"> <%- task.id %> </td>
                <td class="name"> <%- task.name %> </td>
                <td class="email"> <%- task.email%> </td>
                <td class="phone"> <%- task.phone %> </td>

                <td>
                    <button class="delete" data-task-id="<%- task.id %>">Delete</button>
                    <button class="edit" data-task-id="<%- task.id %>">Edit</button>
                </td>
            </tr>
            <% }); %>
    </table>

    <script>
        var addBtn = document.getElementById('addBtn');
        var taskList = document.querySelector('#task-list');
        var editModal = document.getElementById('editModal');
        var updateBtn = document.getElementById('updateBtn');



        addBtn.addEventListener("click", () => {
            let name = document.getElementById('name').value;
            let email = document.getElementById('email').value;
            let phone = document.getElementById('phone').value;


            const task = {
                name: name,
                email: email,
                phone: phone,

            }
            console.log("Task>>>>>>>>>", task);
            fetch("/insertData", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(task)
            }).then((result) => {
                return result.json();
            }).then((data) => {
                console.log("DATA>>>>>>>>>>>>>>", data);
                if (data.status === 'done') {
                    taskId = data.taskId;

                    console.log('id>>>>>>>>of >>>>>>', taskId)
                    //append new row to the table 
                    var newRow = document.createElement('tr');
                    newRow.innerHTML = `
                            <td>${taskId}</td>
                            <td class="name">${name}</td>
                            <td class="email">${email}</td>
                            <td class="phone">${phone}</td>
                            
                            <td>
                                <button class="delete" data-task-id = " ${taskId} ">Delete</button>
                                <button class="edit" data-task-id = " ${taskId} ">Edit</button>
                            </td>` ;
                    taskList.appendChild(newRow);

                    //clear input fields 
                    name.value = '';
                    email.value = '';
                    phone.value = '';

                }
                else {
                    alert('failed to add ')
                }

            }).catch((err) => {
                console.log("Error>>>>>>>>>>>");
            })
        });
        // for deleting the elemnet       
        taskList.addEventListener('click', function (event) {
            if (event.target.classList.contains('delete')) {
                const tableItem = event.target.parentElement.parentElement;;
                console.log('event.target.parentElement', tableItem)
                const taskId = event.target.getAttribute('data-task-id');
                console.log('id for delete >>>', taskId);

                //fetching api for delete

                fetch('delete-task', {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ taskId: taskId })
                })
                    // handling the peomis
                    .then((result) => {
                        if (!result.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return result.json();
                    })
                    .then((data) => {
                        if (data.status === 'done') {
                            tableItem.remove();
                        }
                        else {
                            alert('unable to delete a task');
                        }
                    })
            }

            
        })

        taskList.addEventListener("click", (event) => {
            if (event.target.classList.contains('edit')) {
                event.preventDefault();
                const rowItem = event.target.closest('tr');
                console.log('related Row ==:', rowItem)
                const taskId = event.target.getAttribute('data-task-id');
                console.log('id for edit :', taskId);

                // Capture the specific row's data and task ID
                const taskNameElement = rowItem.querySelector('.name');
                const taskEmailElement = rowItem.querySelector('.email');
                const taskPhoneElement = rowItem.querySelector('.phone');

                console.log('taskelement for name ,email, phone==>', taskNameElement, taskEmailElement, taskPhoneElement);


                // Update the modal form with the current values
                document.getElementById('modalName').value = taskNameElement.textContent;
                console.log('taskNameElement.textContent===>', taskNameElement.textContent);
                document.getElementById('modalEmail').value = taskEmailElement.textContent;
                document.getElementById('modalPhone').value = taskPhoneElement.textContent;


                // Show the edit modal form for edit and update 
                editModal.style.display = 'block';

                // Add an event listener to the "Update" button in the modal
                updateBtn.addEventListener("click", () => {
                    const updatedName = document.getElementById('modalName').value;
                    const updatedEmail = document.getElementById('modalEmail').value;
                    const updatedPhone = document.getElementById('modalPhone').value;

                    console.log('updated value :', updatedName, updatedEmail, updatedPhone);


                    // Update the specific row with the new values
                    taskNameElement.textContent = updatedName;
                    taskEmailElement.textContent = updatedEmail;
                    taskPhoneElement.textContent = updatedPhone;


                    // Hide the edit modal
                    editModal.style.display = 'none';

                    // Send a request to update the data on the server using the updated values
                    const updatedData = {
                        taskId: taskId,
                        updatedName: updatedName,
                        updatedEmail: updatedEmail,
                        updatedPhone: updatedPhone,

                    };
                    console.log('updatedData ===>> :', updatedData.taskId, updatedData.updatedName, updatedData.updatedEmail, updatedPhone)

                    // Send the updated data to the server using fetch and update the database
                    fetch('/update-task', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updatedData)
                    }).then((response) => {
                        if (response.ok) {
                            // Data updated successfully on the server
                            return response.json();
                        } else {
                            // Handle errors here, e.g., show an error message
                            console.error('Failed to update data on the server');
                        }
                    }).then((data) => {
                        if (data.status === 'error') {
                            console.error('Error updating data:', data.message);
                        }
                    });
                });
            }
        });




    </script>
</body>

</html>
